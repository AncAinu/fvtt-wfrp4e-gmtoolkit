{"_id":"2sefSFqqAbySw2nz","name":"Reduce Advantage","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Reduces Advantage for the selected token by 1 (to minimum 0).\r\n*/\r\n\r\nif (canvas.tokens.controlledTokens.length != 1) \r\n  return ui.notifications.error(game.i18n.localize(\"GMTOOLKIT.Token.SingleSelect\"));\r\n\r\nlet actorName = actor.data.name;\r\nlet startingAdvantage = Number(actor.data.data.status.advantage.value);\r\nlet uiNotice = String(\"No change made.\");\r\n\r\nif (startingAdvantage > 0)\r\n    {\r\n        let newAdvantage = Number(startingAdvantage - 1);\r\n\r\n        actor.update({\"data.status.advantage.value\" : newAdvantage}); \r\n\r\n        uiNotice = game.i18n.format(\"GMTOOLKIT.Advantage.Reduced\",{actorName, startingAdvantage, newAdvantage } );\r\n\r\n    } \r\n    else \r\n    {\r\n        uiNotice = game.i18n.format(\"GMTOOLKIT.Advantage.None\",{actorName, startingAdvantage } );\r\n    }\r\n\r\nui.notifications.notify(uiNotice);\r\n","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/degen.svg","actorIds":[]}
{"_id":"6EKiEQZTbmQN97Vr","name":"Clear Advantage","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Resets Advantage for the selected token to 0 */\r\n\r\nif (canvas.tokens.controlledTokens.length != 1) \r\n  return ui.notifications.error(game.i18n.localize(\"GMTOOLKIT.Token.SingleSelect\"));\r\n  \r\nlet startingAdvantage = Number(actor.data.data.status.advantage.value);\r\n\r\nactor.update({\"data.status.advantage.value\" : 0})\r\n\r\nlet uiNotice = game.i18n.format(\"GMTOOLKIT.Advantage.Reset\",{actorName: actor.data.name, startingAdvantage} );\r\n\r\nui.notifications.notify(uiNotice);\r\n","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/circle.svg","actorIds":[]}
{"_id":"AjUYYy7qAN55BERN","name":"Add Advantage","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Increases Advantage for the selected token by 1.\r\n * Caps at character's maximum advantage. \r\n * This macro is adapted from Add XP WFRP4e by @DasSauerkraut#3215\r\n * https://github.com/CatoThe1stElder/WFRP-4th-Edition-FoundryVTT/wiki/Macro-Repository#add-xp\r\n*/\r\n\r\nif (canvas.tokens.controlledTokens.length != 1) \r\n  return ui.notifications.error(game.i18n.localize(\"GMTOOLKIT.Token.SingleSelect\"));\r\n\r\nlet actorName = actor.data.name;\r\nlet maxAdvantage = Number(actor.data.data.status.advantage.max);\r\nlet startingAdvantage = Number(actor.data.data.status.advantage.value);\r\nlet uiNotice = String(\"No change made.\");\r\n\r\nif (maxAdvantage > startingAdvantage)\r\n    {\r\n        let newAdvantage = Number(startingAdvantage + 1);\r\n\r\n        actor.update({\"data.status.advantage.value\" : newAdvantage}); \r\n\r\n        uiNotice = game.i18n.format(\"GMTOOLKIT.Advantage.Increased\",{actorName, startingAdvantage, newAdvantage } );\r\n\r\n    } \r\n    else \r\n    {\r\n        uiNotice = game.i18n.format(\"GMTOOLKIT.Advantage.Max\",{actorName, startingAdvantage, maxAdvantage } );\r\n    }\r\n\r\nui.notifications.notify(uiNotice);\r\n","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/regen.svg","actorIds":[]}
{"_id":"KzO66MPdEQL809AP","name":"Set Token Vision and Light","permission":{"default":0,"5hVxcxv15974RTjj":3},"type":"script","flags":{},"scope":"global","command":"/* Open a dialog for quickly changing vision and lighting parameters of the selected token(s).\r\n * This macro requires the advanced macros functionality of Furnace by @KaKaRoTo#4756\r\n * https://github.com/kakaroto/fvtt-module-furnace/\r\n * This macro is adapted for WFRP4e from Token Vision Configuration by @Sky#9453\r\n * https://github.com/Sky-Captain-13/foundry/tree/master/scriptMacros\r\n */\r\n\r\nif (canvas.tokens.controlledTokens.length < 1) \r\n  return ui.notifications.error( game.i18n.localize(\"GMTOOLKIT.Token.Select\") );\r\n\r\nlet applyChanges = false;\r\n\r\nnew Dialog({\r\n  title: game.i18n.localize(\"GMTOOLKIT.Dialog.SetVisionLight.Title\"),\r\n  content: `\r\n    <form> \r\n      <div class=\"form-group\">\r\n        <label>`\r\n      + game.i18n.localize(\"GMTOOLKIT.Dialog.SetVisionLight.VisionType\") +         \r\n      `</label>\r\n        <select id=\"vision-type\" name=\"vision-type\"> \r\n          <option value=\"normalVision\">` \r\n          + game.i18n.localize(\"GMTOOLKIT.Vision.Normal\") + \r\n           `<option value=\"blindedVision\">` \r\n      + game.i18n.localize(\"GMTOOLKIT.Vision.Blinded\") + \r\n      `</option>\r\n          <option value=\"nightVision\">` \r\n      + game.i18n.localize(\"GMTOOLKIT.Vision.Night\") + \r\n       `</option>\r\n          <option value=\"darkVision\">` \r\n      + game.i18n.localize(\"GMTOOLKIT.Vision.Dark\") + \r\n         `</option>\r\n          <option value=\"noVision\">`\r\n      + game.i18n.localize(\"GMTOOLKIT.Vision.None\") + \r\n          `</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>`\r\n      + game.i18n.localize(\"GMTOOLKIT.Dialog.SetVisionLight.LightSource\") + \r\n      `</label>\r\n        <select id=\"light-source\" name=\"light-source\">\r\n          <option value=\"none\">` \r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.NoLight\") +           \r\n          `</option>\r\n          <option value=\"candle\">`\r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.Candle\") +           \r\n          `</option>\r\n          <option value=\"davrich-lamp\">`\r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.DavrichLamp\") + \r\n          `</option>\r\n          <option value=\"torch\">`\r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.Torch\") + \r\n          `</option>\r\n          <option value=\"lantern\">`\r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.Lantern\") + \r\n          `</option>\r\n          <option value=\"storm-dim\">` \r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.StormLantern.Dim\") + \r\n          `</option>\r\n          <option value=\"storm-bright\">` \r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.StormLantern.Bright\") + \r\n          `</option>\r\n          <option value=\"storm-shut\">` \r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.StormLantern.Shut\") + \r\n          `</option>\r\n          <option value=\"light\">`\r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.Light\") + \r\n          `</option>\r\n          <option value=\"witchlight\">`\r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.Witchlight\") + \r\n          `</option>\r\n          <option value=\"glowing-skin\">` \r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.GlowingSkin\") + \r\n          `</option>\r\n          <option value=\"ablaze\">` \r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.Ablaze\") + \r\n          `</option>\r\n          <option value=\"pha\">`\r\n          + game.i18n.localize(\"GMTOOLKIT.LightSource.Pha\") + \r\n          `</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: game.i18n.localize(\"GMTOOLKIT.Dialog.Apply\"),\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: game.i18n.localize(\"GMTOOLKIT.Dialog.Cancel\"),\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"nochange\"; // TODO: default vision option based on condition -> trait -> talent\r\n\t\tlet lightSource = html.find('[name=\"light-source\"]')[0].value || \"nochange\";\r\n        let advNightVision = 0;\r\n        let dimSight = 0;\r\n        let brightSight = 0;\r\n        let dimLight = 0;\r\n        let brightLight = 0; // TODO: user define brightLight distance as ratio of dimLight\r\n        let lightAngle = 360;\r\n\t\tlet lightColor = \"\"; // TODO: apply colours for different light sources\r\n        let lockRotation = token.data.lockRotation;\r\n\t\t\r\n        // Get Light Source Values\r\n        switch (lightSource) {\r\n          case \"none\":\r\n            dimLight = 0;\r\n            brightLight = 0;\r\n            break;\r\n          case \"candle\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"torch\":\r\n            dimLight = 15;\r\n            brightLight = 7.5;\r\n            break;\r\n          case \"davrich-lamp\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"lantern\":\r\n            dimLight = 20;\r\n            brightLight = 10;\r\n            break;\r\n          case \"storm-dim\":\r\n            dimLight = 20;\r\n            brightLight = 10;\r\n            lockRotation = false;\r\n            lightAngle = 90;\r\n            break;\r\n          case \"storm-bright\":\r\n            dimLight = 30;\r\n            brightLight = 15;\r\n            lockRotation = false;\r\n            lightAngle = 60;\r\n            break;\r\n          case \"light\":\r\n            dimLight = 15;\r\n            brightLight = 7.5;\r\n            break;\r\n          case \"witchlight\":\r\n            dimLight = 20;\r\n            brightLight = 10;\r\n            break;\r\n          case \"glowing-skin\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"ablaze\":\r\n            dimLight = 15;\r\n            brightLight = 7.5;\r\n            break;\r\n          case \"pha\":\r\n            dimLight = token.actor.data.data.characteristics.wp.bonus;\r\n            brightLight = (dimLight / 2);\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimLight = token.data.dimLight;\r\n            brightLight = token.data.brightLight;\r\n            lightAngle = token.data.lightAngle;\r\n            lockRotation = token.data.lockRotation;\r\n            lightColor = token.data.lightColor;\r\n        }\r\n\t\t\r\n\t\t\r\n        // Get Vision Type Values\r\n\t\tswitch (visionType) {\r\n          case \"noVision\":\r\n            dimSight = 0;\r\n            brightSight = 0;\r\n            break;\r\n          case \"normalVision\":\r\n            dimSight = 2; // TODO: user define normal vision\r\n            brightSight = 0;\r\n            break;\r\n          case \"blindedVision\":\r\n            dimSight = 1;\r\n            brightSight = 0; \t\t\t\r\n            break;\r\n          case \"nightVision\":\r\n\t\t\tlet item = token.actor.items.find(i => i.data.name.toLowerCase() == game.i18n.localize(\"GMTOOLKIT.Talent.NightVision\").toLowerCase() );\r\n\t\t\t\tif(item == undefined || item.data.data.advances.value < 1) {\r\n\t\t\t\t\tadvNightVision = 0;\r\n\t\t\t\t} else { \r\n\t\t\t\t\tfor (let item of token.actor.items)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t  if (item.type == \"talent\" && item.name.toLowerCase() == game.i18n.localize(\"GMTOOLKIT.Talent.NightVision\").toLowerCase() )\r\n\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\tadvNightVision += item.data.data.advances.value;\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\tdimSight = (20 * advNightVision) + dimLight; \r\n\t\t\tbrightSight = (5 * advNightVision) + brightLight;\r\n\t\t\tbreak;\r\n          case \"darkVision\":\r\n            dimSight = 60;\r\n            brightSight= 30;\r\n            break;\r\n          case \"nochange\":\r\n            default:\r\n            dimSight = token.data.dimSight;\r\n            brightSight = token.data.brightSight;\r\n        }\r\n\t\t\r\n        // Update Token\r\n        token.update({\r\n          vision: true,\r\n          visionType: visionType,\r\n          lightSource: lightSource,\r\n          dimLight: dimLight, \r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lightColor: lightColor,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          lockRotation: lockRotation,\r\n          advNightVision: advNightVision\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);\r\n","author":"5hVxcxv15974RTjj","img":"icons/svg/blind.svg","actorIds":[]}
{"_id":"ihMGjHFP3SdvYH2k","name":"Simply d100","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"chat","flags":{},"scope":"global","command":"/r d100","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"pZmPtsEZHOpyJfnq","name":"Reset Fortune","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Restores Fortune the Fate level of targetted character(s).\r\n * Applies any Luck talent bonus.\r\n */\r\n\r\nif (game.user.targets.size < 1) \r\n  return ui.notifications.error(game.i18n.localize(\"GMTOOLKIT.Token.TargetPCs\"));\r\n\r\nlet targetName = String(); \r\nlet startingFortune = Number();\r\nlet newFortune = Number();\r\nlet chatContent = String(\"No change made.\");\r\n\r\ngame.user.targets.forEach(target => {\r\n\ttargetName = target.data.name; \r\n\t\r\n\tif (target.actor.data.type == \"character\")\r\n\t\t{\r\n  \t\t\tstartingFortune = target.actor.data.data.status.fortune.value;\r\n\t\t\tlet advLuck = 0;\r\n\t\t\tlet item = target.actor.items.find(i => i.data.name === game.i18n.localize(\"GMTOOLKIT.Talent.Luck\") )\r\n\t\t\tif(item == undefined || item.data.data.advances.value < 1) {\r\n\t\t\t\tadvLuck = 0;\r\n\t\t\t\t} else { \r\n\t\t\t\t\tfor (let item of target.actor.items)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\tif (item.type == \"talent\" && item.name == game.i18n.localize(\"GMTOOLKIT.Talent.Luck\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tadvLuck += item.data.data.advances.value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\tnewFortune = target.actor.data.data.status.fate.value +advLuck\r\n\t\t\ttarget.actor.update({\r\n\t\t\t\t\"data.status.fortune.value\": newFortune\r\n\t\t\t})\r\n \r\n\t\t\tchatContent = game.i18n.format(\"GMTOOLKIT.ResetFortune.Success\",{targetName, startingFortune, newFortune} );\r\n\t\t} else {\r\n\t\t\tchatContent = game.i18n.format(\"GMTOOLKIT.ResetFortune.NotPC\", {targetName} )\r\n\t\t  }\r\n\tlet chatData = {\r\n\t\tuser: game.user._id,\r\n\t\tcontent: chatContent\r\n\t};\r\n\r\n    ChatMessage.create(chatData, {});  \r\n \tconsole.log(chatContent);\r\n})\r\n","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/temple.svg","actorIds":[]}
{"_id":"rzKeTLKp0bOp5SK9","name":"Add 20XP","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Adds a set amount of XP to targeted character(s).\r\n * Adds XP update note to the Chat log.\r\n */\r\n\r\n // Enter Wanted XP.\r\nlet XP = 20; // TODO: Add dialog box for XP. \r\n\r\nif (game.user.targets.size < 1) \r\n  return ui.notifications.error(game.i18n.localize(\"GMTOOLKIT.Token.TargetPCs\"));\r\n\r\nlet targetName = String(); \r\nlet XPTotal = Number();\r\nlet newXPTotal = Number();\r\nlet XPCurrent = Number();\r\nlet newXPCurrent = Number();\r\nlet chatContent = String(\"No change made.\");\r\n\r\ngame.user.targets.forEach(target => {\r\ntargetName = target.data.name; \r\n\r\nif (target.actor.data.type == \"character\")\r\n  {\r\n    XPTotal = target.actor.data.data.details.experience.total; \r\n    newXPTotal = XPTotal + XP;\r\n    XPCurrent = target.actor.data.data.details.experience.current; \r\n    newXPCurrent = XPCurrent + XP;\r\n\r\n    target.actor.update({\r\n      \"data.details.experience.total\": newXPTotal\r\n    })\r\n        \r\n    chatContent = game.i18n.format(\"GMTOOLKIT.AddXP.Success\", {XP, targetName, XPTotal, newXPTotal, XPCurrent, newXPCurrent} )\r\n  } else {\r\n    chatContent = game.i18n.format(\"GMTOOLKIT.AddXP.NotPC\", {targetName} )\r\n  }\r\n\r\n  let chatData = {\r\n    user: game.user._id,\r\n    content: chatContent\r\n  };\r\n\r\nChatMessage.create(chatData, {});  \r\nconsole.log(chatContent)\r\n\r\n})\r\n","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/up.svg","actorIds":[]}
{"_id":"tiKEfs1nB7zAMgYg","name":"Pull Everyone to Scene","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Yanks every player into the scene that the GM is on. \r\n * Does not activate the scene. \r\n */\r\n\r\nif (!game.user.isGM) {\r\n  ui.notifications.warn(\"You don't have permission to pull players to scenes!\");\r\n}\r\nfor ( let u of game.users.players ) {\r\n  game.socket.emit(\"pullToScene\", game.scenes.viewed.id, u.id);\r\n}","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/door-exit.svg","actorIds":[]}
