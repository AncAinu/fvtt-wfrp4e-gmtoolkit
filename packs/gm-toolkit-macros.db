{"_id":"2sefSFqqAbySw2nz","name":"Reduce Advantage","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Reduces Advantage for the selected token by 1 (to minimum 0).\r\n*/\r\n\r\nupdateAdvantage(token,\"reduce\");","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/degen.svg","actorIds":[]}
{"_id":"6EKiEQZTbmQN97Vr","name":"Clear Advantage","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Resets Advantage for the selected token to 0 */\r\n\r\nupdateAdvantage(token,\"clear\");\r\n","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/circle.svg","actorIds":[]}
{"_id":"6UwKY8nGZyXzAXCa","name":"Toggle Scene Visibility and Light","permission":{"default":0,"h21fB4dFvdDBRcFD":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"/* Toggles the Token Vision and Global Illumination settings. \r\n * If Token Vision is set, Global Illumination is unset (and vice-versa).\r\n * Applies to the scene being viewed, which is not necessarily the active scene.\r\n */\r\n\r\n\r\nlet thisScene = game.scenes.viewed;\r\nlet uiNotice = game.i18n.format(\"GMTOOLKIT.Message.UnexpectedNoChange\", {});\r\n\r\nif (thisScene.data.tokenVision) {\r\n  thisScene.update({tokenVision: false, globalLight: true});\r\n  uiNotice = game.i18n.format(\"GMTOOLKIT.Scene.GlobalNotToken\", {sceneName: thisScene.name}, {});\r\n} else {\r\n  thisScene.update({tokenVision: true, globalLight: false});\r\n  uiNotice = game.i18n.format(\"GMTOOLKIT.Scene.TokenNotGlobal\", {sceneName: thisScene.name}, {});\r\n}\r\n\r\nui.notifications.notify(uiNotice);\r\n","author":"h21fB4dFvdDBRcFD","img":"icons/svg/eye.svg","actorIds":[]}
{"_id":"AjUYYy7qAN55BERN","name":"Add Advantage","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Increases Advantage for the selected token by 1.\r\n * Caps at character's maximum advantage. \r\n*/\r\n\r\nupdateAdvantage(token,\"increase\");\r\n","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/regen.svg","actorIds":[]}
{"_id":"KzO66MPdEQL809AP","name":"Set Token Vision and Light","permission":{"default":0,"5hVxcxv15974RTjj":3},"type":"script","flags":{},"scope":"global","command":"/* Open a dialog for quickly changing vision and lighting parameters of the selected token(s).\r\n * This macro is adapted for WFRP4e from Token Vision Configuration by @Sky#9453\r\n * https://github.com/Sky-Captain-13/foundry/tree/master/scriptMacros\r\n */\r\n\r\nsetTokenVisionLight();\r\n\r\nasync function setTokenVisionLight() { \r\n  if (canvas.tokens.controlled.length < 1) \r\n    return ui.notifications.error( game.i18n.localize(\"GMTOOLKIT.Token.Select\"),{} );\r\n\r\n  let applyChanges = false;\r\n\r\n  new Dialog({\r\n    title: game.i18n.localize(\"GMTOOLKIT.Dialog.SetVisionLight.Title\"),\r\n    content: `\r\n      <form> \r\n        <div class=\"form-group\">\r\n          <label>\r\n          ${game.i18n.localize(\"GMTOOLKIT.Dialog.SetVisionLight.VisionType\")}\r\n        </label>\r\n          <select id=\"vision-type\" name=\"vision-type\"> \r\n            <option value=\"normalVision\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.Vision.Normal\")} \r\n            </opton> \r\n            <option value=\"blindedVision\"> \r\n            ${game.i18n.localize(\"GMTOOLKIT.Vision.Blinded\")} \r\n            </option>\r\n            <option value=\"nightVision\"> \r\n            ${game.i18n.localize(\"GMTOOLKIT.Vision.Night\")} \r\n            </option>\r\n            <option value=\"darkVision\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.Vision.Dark\")} \r\n            </option>\r\n            <option value=\"noVision\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.Vision.None\")} \r\n            </option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>\r\n          ${game.i18n.localize(\"GMTOOLKIT.Dialog.SetVisionLight.LightSource\")} \r\n          </label>\r\n          <select id=\"light-source\" name=\"light-source\">\r\n            <option value=\"none\"> \r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.NoLight\")}\r\n            </option>\r\n            <option value=\"candle\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.Candle\")} \r\n            </option>\r\n            <option value=\"davrich-lamp\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.DavrichLamp\")} \r\n            </option>\r\n            <option value=\"torch\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.Torch\")}\r\n            </option>\r\n            <option value=\"lantern\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.Lantern\")}\r\n            </option>\r\n            <option value=\"storm-dim\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.StormLantern.Dim\")} \r\n            </option>\r\n            <option value=\"storm-bright\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.StormLantern.Bright\")} \r\n            </option>\r\n            <option value=\"storm-shut\"> \r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.StormLantern.Shut\")}\r\n            </option>\r\n            <option value=\"ablaze\"> \r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.Ablaze\")} \r\n            </option>\r\n            <option value=\"light\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.Light\")}\r\n            </option>\r\n            <option value=\"witchlight\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.Witchlight\")}\r\n            </option>\r\n            <option value=\"glowing-skin\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.GlowingSkin\")}\r\n            </option>\r\n            <option value=\"soulfire\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.Soulfire\")} \r\n            </option>\r\n            <option value=\"pha\">\r\n            ${game.i18n.localize(\"GMTOOLKIT.LightSource.Pha\")} \r\n            </option>\r\n          </select>\r\n        </div>\r\n      </form>\r\n      `,\r\n    buttons: {\r\n      yes: {\r\n        icon: \"<i class='fas fa-check'></i>\",\r\n        label: game.i18n.localize(\"GMTOOLKIT.Dialog.Apply\"),\r\n        callback: () => applyChanges = true\r\n      },\r\n      no: {\r\n        icon: \"<i class='fas fa-times'></i>\",\r\n        label: game.i18n.localize(\"GMTOOLKIT.Dialog.Cancel\"),\r\n      },\r\n    },\r\n    default: \"yes\",\r\n    close: html => {\r\n      if (applyChanges) {\r\n        for ( let token of canvas.tokens.controlled ) {\r\n          let visionType = html.find('[name=\"vision-type\"]')[0].value || \"nochange\"; // TODO: default vision option based on condition -> trait -> talent\r\n          let item; // used for finding whether token has Night Vision or Dark Vision \r\n          let lightSource = html.find('[name=\"light-source\"]')[0].value || \"nochange\";\r\n          let advNightVision = 0;\r\n          let dimSight = 0;\r\n          let brightSight = 0;\r\n          let dimLight = 0;\r\n          let brightLight = 0; // TODO: user define brightLight distance as ratio of dimLight\r\n          let lightAngle = 360;\r\n          let lightColor = \"\"; // TODO: apply colours for different light sources\r\n          let lockRotation = token.data.lockRotation;\r\n      \r\n          // Get Light Source Values\r\n          switch (lightSource) {\r\n            case \"none\":\r\n              dimLight = 0;\r\n              break;\r\n            case \"candle\":\r\n              dimLight = 10;\r\n              break;\r\n            case \"torch\":\r\n              dimLight = 15;\r\n              break;\r\n            case \"davrich-lamp\":\r\n              dimLight = 10;\r\n              break;\r\n            case \"lantern\":\r\n              dimLight = 20;\r\n              break;\r\n            case \"storm-dim\":\r\n              dimLight = 20;\r\n              lightAngle = 0;\r\n              break;\r\n              case \"storm-bright\":\r\n                dimLight = 30;\r\n                lockRotation = false;\r\n                lightAngle = 60;\r\n                break;\r\n            case \"storm-shut\":\r\n              dimLight = 0;\r\n              break;\r\n            case \"light\":\r\n              dimLight = 15;\r\n              break;\r\n            case \"witchlight\":\r\n              dimLight = 20;\r\n              break;\r\n            case \"glowing-skin\":\r\n              dimLight = 10;\r\n              break;\r\n            case \"ablaze\":\r\n              dimLight = 15;\r\n              break;\r\n            case \"pha\":\r\n              dimLight = token.actor.data.data.characteristics.wp.bonus;\r\n              break;\r\n              case \"soulfire\":\r\n                dimLight = 15;\r\n                break;\r\n                case \"nochange\":\r\n                  default:\r\n                    dimLight = token.data.dimLight;\r\n                    brightLight = token.data.brightLight;\r\n                    lightAngle = token.data.lightAngle;\r\n                    lockRotation = token.data.lockRotation;\r\n                    lightColor = token.data.lightColor;\r\n                  }\r\n                  \r\n          brightLight = (dimLight / 2);\r\n                  \r\n          // Get Vision Type Values\r\n      switch (visionType) {\r\n        case \"blindedVision\":\r\n          brightSight = 1;\r\n          dimSight = 0;\r\n          break;\r\n        case \"noVision\":\r\n          dimSight = 0;\r\n          brightSight = 0;\r\n          dimLight = 0;\r\n          brightLight = 0;\r\n          break;\r\n        case \"darkVision\": \r\n          item = token.actor.items.find(i => i.data.name.toLowerCase() == game.i18n.localize(\"GMTOOLKIT.Trait.DarkVision\").toLowerCase() );\r\n            if(item == undefined) { \r\n            (game.settings.get(\"wfrp4e-gm-toolkit\", \"overrideDarkVision\")) ? dimSight = Number(game.settings.get(\"wfrp4e-gm-toolkit\", \"rangeDarkVision\"))  : dimSight = 0 ;\r\n          } else {\r\n            dimSight = Number(game.settings.get(\"wfrp4e-gm-toolkit\", \"rangeDarkVision\"));\r\n          }\r\n          brightSight = (dimSight / 2);\r\n          break;\r\n        case \"nightVision\":\r\n          item = token.actor.items.find(i => i.data.name.toLowerCase() == game.i18n.localize(\"GMTOOLKIT.Talent.NightVision\").toLowerCase() );\r\n            if(item == undefined) { \r\n              (game.settings.get(\"wfrp4e-gm-toolkit\", \"OverrideNightVision\")) ? advNightVision = 1  : advNightVision = 0 ;\r\n            } else { \r\n              for (let item of token.actor.items)\r\n                {\r\n                  if (item.name.toLowerCase() == game.i18n.localize(\"GMTOOLKIT.Talent.NightVision\").toLowerCase() ) {\r\n                    switch (item.type) {\r\n                      case \"trait\" :\r\n                        advNightVision = 1;\r\n                        break;\r\n                      case \"talent\" :\r\n                        advNightVision += item.data.data.advances.value;\r\n                        break;\r\n                    }\r\n                  }\r\n                }\r\n            }\r\n          brightSight = (20 * advNightVision); \r\n          dimSight = brightSight + dimLight; \r\n          break;\r\n        case \"normalVision\":\r\n          dimSight = Number(game.settings.get(\"wfrp4e-gm-toolkit\", \"rangeNormalSight\"));\r\n          brightSight = 0;\r\n          break;\r\n        case \"nochange\":\r\n          default:\r\n          dimSight = token.data.dimSight;\r\n          brightSight = token.data.brightSight;\r\n      }\r\n      \r\n          // Update Token\r\n          token.update({\r\n            vision: true,\r\n            visionType: visionType,\r\n            lightSource: lightSource,\r\n            dimLight: dimLight, \r\n            brightLight:  brightLight,\r\n            lightAngle: lightAngle,\r\n            lightColor: lightColor,\r\n            dimSight: dimSight,\r\n            brightSight: brightSight,\r\n            lockRotation: lockRotation,\r\n            advNightVision: advNightVision\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }).render(true);\r\n};","author":"5hVxcxv15974RTjj","img":"icons/svg/blind.svg","actorIds":[]}
{"_id":"ihMGjHFP3SdvYH2k","name":"Simply d100","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"chat","flags":{},"scope":"global","command":"/r d100","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"pZmPtsEZHOpyJfnq","name":"Reset Fortune","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Restores Fortune the Fate level of targetted character(s).\r\n * Applies any Luck talent bonus.\r\n */\r\n\r\nresetFortune();\r\n\r\nasync function resetFortune() {\r\n\tif (game.user.targets.size < 1) \r\n\treturn ui.notifications.error(game.i18n.localize(\"GMTOOLKIT.Token.TargetPCs\"),{});\r\n\r\n\tlet targetName = String(); \r\n\tlet startingFortune = Number();\r\n\tlet newFortune = Number();\r\n\tlet chatContent;\r\n\r\n\tgame.user.targets.forEach(target => {\r\n\t\ttargetName = target.data.name; \r\n\t\t\r\n\t\tif (target.actor.data.type == \"character\")\r\n\t\t\t{\r\n\t\t\t\tstartingFortune = target.actor.data.data.status.fortune.value;\r\n\t\t\t\tlet advLuck = 0;\r\n\t\t\t\tlet item = target.actor.items.find(i => i.data.name === game.i18n.localize(\"GMTOOLKIT.Talent.Luck\") )\r\n\t\t\t\tif(item == undefined || item.data.data.advances.value < 1) {\r\n\t\t\t\t\tadvLuck = 0;\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\tfor (let item of target.actor.items)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (item.type == \"talent\" && item.name == game.i18n.localize(\"GMTOOLKIT.Talent.Luck\"))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tadvLuck += item.data.data.advances.value;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\tnewFortune = target.actor.data.data.status.fate.value +advLuck\r\n\t\t\t\ttarget.actor.update({\r\n\t\t\t\t\t\"data.status.fortune.value\": newFortune\r\n\t\t\t\t})\r\n\t\r\n\t\t\t\tchatContent = game.i18n.format(\"GMTOOLKIT.ResetFortune.Success\",{targetName, startingFortune, newFortune} );\r\n\t\t\t} else {\r\n\t\t\t\tchatContent = game.i18n.format(\"GMTOOLKIT.ResetFortune.NotPC\", {targetName} )\r\n\t\t\t}\r\n\t\tlet chatData = {\r\n\t\t\tuser: game.user._id,\r\n\t\t\tcontent: chatContent\r\n\t\t};\r\n\r\n\t\tChatMessage.create(chatData, {});  \r\n\t\tconsole.log(chatContent);\r\n\t})\r\n};","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/temple.svg","actorIds":[]}
{"_id":"rzKeTLKp0bOp5SK9","name":"Add XP","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Adds a set amount of XP to targeted character(s). \r\n* Default amount of XP can be preset in module settings, \r\n* along with option to prompt for XP amount each time.\r\n* Non-whole numbers are rounded off. Negative numbers are subtracted. \r\n* Adds XP update note to the Chat log.\r\n */\r\n\r\naddXP();\r\n\r\nasync function addXP() {\r\n\r\n  if (game.user.targets.size < 1) return ui.notifications.error(game.i18n.localize(\"GMTOOLKIT.Token.TargetPCs\"), {});\r\n  \r\n  // Set default XP\r\n  let XP = Number(game.settings.get(\"wfrp4e-gm-toolkit\", \"addXPDefault\"))\r\n  \r\n  // Prompt for XP\r\n  if (game.settings.get(\"wfrp4e-gm-toolkit\", \"addXPPrompt\")) {\r\n    const dialog = new Dialog({\r\n      title: (game.i18n.localize('GMTOOLKIT.Dialog.AddXP.Title')),\r\n      content: `<form>\r\n              <div class=\"form-group\">\r\n              <label>\r\n                  ${game.i18n.localize(\"GMTOOLKIT.Dialog.AddXP.Prompt\")}          \r\n                  </label> \r\n                  <input type=\"text\" id=\"add-xp\" name=\"add-xp\" value=\"${XP}\" />\r\n              </div>\r\n          </form>`,\r\n      buttons: {\r\n        yes: {\r\n          icon: \"<i class='fas fa-check'></i>\",\r\n          label: game.i18n.localize(\"GMTOOLKIT.Dialog.Apply\"),\r\n          callback: (html) => {\r\n            let XP = html.find('#add-xp').val();\r\n            updateXP(Number(XP));\r\n          }\r\n        },\r\n        no: {\r\n          icon: \"<i class='fas fa-times'></i>\",\r\n          label: game.i18n.localize(\"GMTOOLKIT.Dialog.Cancel\"),\r\n        },\r\n      },\r\n      default: \"yes\"\r\n  }).render(true);\r\n  } else {\r\n    updateXP(XP)\r\n  }\r\n  \r\n  function updateXP(XP) {\r\n    XP = Math.round(XP);\r\n    if (isNaN(XP)) return ui.notifications.error(game.i18n.localize('GMTOOLKIT.Dialog.AddXP.InvalidXP'))\r\n  \r\n    let targetName = String(); \r\n    let XPTotal = Number();\r\n    let newXPTotal = Number();\r\n    let XPCurrent = Number();\r\n    let newXPCurrent = Number();\r\n    let chatContent = String(game.i18n.localize(\"GMTOOLKIT.Dialog.Cancel\"));\r\n  \r\n    game.user.targets.forEach(target => {\r\n    targetName = target.data.name; \r\n  \r\n    if (target.actor.data.type == \"character\")\r\n      {\r\n        XPTotal = target.actor.data.data.details.experience.total; \r\n        newXPTotal = Math.max(XPTotal + XP,0);\r\n        XPCurrent = target.actor.data.data.details.experience.current; \r\n        newXPCurrent = XPCurrent + XP,0;\r\n  \r\n        target.actor.update({\r\n          \"data.details.experience.total\": newXPTotal\r\n        })\r\n            \r\n        chatContent = game.i18n.format('GMTOOLKIT.AddXP.Success', {XP, targetName, XPTotal, newXPTotal, XPCurrent, newXPCurrent} )\r\n      } else {\r\n        chatContent = game.i18n.format('GMTOOLKIT.AddXP.NotPC', {targetName} )\r\n      }\r\n  \r\n      let chatData = {\r\n        user: game.user._id,\r\n        content: chatContent\r\n      };\r\n  \r\n    ChatMessage.create(chatData, {});  \r\n    console.log(chatContent)\r\n    })\r\n  }\r\n};","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/up.svg","actorIds":[]}
{"_id":"tiKEfs1nB7zAMgYg","name":"Pull Everyone to Scene","permission":{"default":0,"k5y1jEYMBqd9uLUx":3},"type":"script","flags":{},"scope":"global","command":"/* Yanks every player into the scene that the GM is on. \r\n * Optionally activates the scene, depending on module setting. \r\n */\r\n\r\npullEveryoneToScene();\r\n\r\nasync function pullEveryoneToScene() {\r\n    if (!game.user.isGM) {\r\n        ui.notifications.error(game.i18n.localize('GMTOOLKIT.Message.ScenePullActivate.NoPermission'), {});\r\n    }\r\n\r\n    switch (game.settings.get(\"wfrp4e-gm-toolkit\", \"scenePullActivate\")) {\r\n        case \"prompt\": \r\n            const dialog = new Dialog({\r\n                title: (game.i18n.localize('GMTOOLKIT.Dialog.ScenePullActivate.Title')),\r\n                content: `<form>\r\n                        <div class=\"form-group\">\r\n                        <label>\r\n                            ${game.i18n.localize(\"GMTOOLKIT.Dialog.ScenePullActivate.Prompt\")}         \r\n                            </label>\r\n                        </div>\r\n                    </form>`,\r\n                buttons: {\r\n                    activate: {\r\n                        label: \"Activate Scene\",\r\n                        callback: async () => pullToScene(true)\r\n                        },\r\n                    pull: {\r\n                        label: \"Pull Only\",\r\n                        callback: async () => pullToScene(false)\r\n                        },\r\n                },\r\n                default: \"pull\"\r\n            }).render(true);\r\n            break;\r\n        case \"always\": \r\n            pullToScene(true)\r\n            break;\r\n        case \"never\":\r\n            pullToScene(false)\r\n            break;\r\n    }\r\n\r\n    function pullToScene(activateScene) {\r\n        let thisScene = game.scenes.viewed\r\n        if (activateScene) {\r\n            thisScene.update({\"active\" : true})\r\n            let sceneActiveState = thisScene.data.active\r\n            ui.notifications.notify(game.i18n.format('GMTOOLKIT.Message.ScenePullActivate.Activated', {sceneName: thisScene.name}));\r\n        } else { \r\n            for ( let u of game.users.players ) {\r\n                game.socket.emit(\"pullToScene\", thisScene.id, u.id);\r\n            }\r\n            let sceneActiveState = String()\r\n            if (thisScene.data.active == true ) {\r\n                sceneActiveState = game.i18n.localize('GMTOOLKIT.Scene.Active')\r\n            } else {\r\n                sceneActiveState = game.i18n.localize('GMTOOLKIT.Scene.NotActive');\r\n            }\r\n            ui.notifications.notify(game.i18n.format('GMTOOLKIT.Message.ScenePullActivate.Pulled', {sceneName: thisScene.name, sceneActiveState}))\r\n        }\r\n    }\r\n};","author":"k5y1jEYMBqd9uLUx","img":"icons/svg/door-exit.svg","actorIds":[]}
